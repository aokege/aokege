name: Rust Lint 和多平台构建

on:
  push:
    branches:
      - '**'

env:
  ERJINZHI_DIR: erjinzhi

jobs:
  build-and-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed to push commits back

      - name: Setup Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cross-compilation tools for ARM
        run: |
          sudo apt update
          sudo apt install -y gcc-arm-linux-gnueabihf gcc-aarch64-linux-gnu

      - name: Add ARM targets
        run: |
          rustup target add armv7-unknown-linux-gnueabihf aarch64-unknown-linux-gnu

      - name: Create erjinzhi folder
        run: mkdir -p $ERJINZHI_DIR

      - name: Build Linux x86_64
        run: |
          cargo build --release
          cp target/release/aokege $ERJINZHI_DIR/aokege-linux-x86_64

      - name: Build Linux ARMv7 (Raspberry Pi 32-bit)
        run: |
          cargo build --release --target armv7-unknown-linux-gnueabihf
          cp target/armv7-unknown-linux-gnueabihf/release/aokege $ERJINZHI_DIR/aokege-linux-armv7

      - name: Build Linux ARM64 (Raspberry Pi 64-bit)
        run: |
          cargo build --release --target aarch64-unknown-linux-gnu
          cp target/aarch64-unknown-linux-gnu/release/aokege $ERJINZHI_DIR/aokege-linux-arm64

      - name: Setup Windows build environment
        uses: actions/setup-node@v3 # dummy step, Windows build requires windows runner, workaround below

      - name: Build Windows x86_64 (cross-compile)
        run: |
          rustup target add x86_64-pc-windows-msvc
          # cross-compiling windows from Linux requires extra toolchains - skipping for simplicity
          echo "Skipping Windows build on Linux runner. Use windows-latest runner for native build."

      - name: Setup macOS build environment
        run: echo "Skipping macOS build on Linux runner. Use macos-latest runner for native build."


      - name: Commit binaries to repo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add $ERJINZHI_DIR/
          git commit -m "Add compiled binaries to /${ERJINZHI_DIR}" || echo "No changes to commit"
          git push
